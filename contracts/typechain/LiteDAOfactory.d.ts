/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiteDAOfactoryInterface extends ethers.utils.Interface {
  functions: {
    "daoRegistry(uint256)": FunctionFragment;
    "deployDAO(string,string,bool,address[],uint256[],uint256,uint256,uint256,uint8,uint8,uint8,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "daoRegistry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDAO",
    values: [
      string,
      string,
      boolean,
      string[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "daoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployDAO", data: BytesLike): Result;

  events: {
    "DAOdeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOdeployed"): EventFragment;
}

export type DAOdeployedEvent = TypedEvent<[string] & { liteDAO: string }>;

export class LiteDAOfactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiteDAOfactoryInterface;

  functions: {
    daoRegistry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployDAO(
      name_: string,
      symbol_: string,
      paused_: boolean,
      voters: string[],
      shares: BigNumberish[],
      votingPeriod_: BigNumberish,
      quorum_: BigNumberish,
      supermajority_: BigNumberish,
      mint: BigNumberish,
      burn: BigNumberish,
      call: BigNumberish,
      gov: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  daoRegistry(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  deployDAO(
    name_: string,
    symbol_: string,
    paused_: boolean,
    voters: string[],
    shares: BigNumberish[],
    votingPeriod_: BigNumberish,
    quorum_: BigNumberish,
    supermajority_: BigNumberish,
    mint: BigNumberish,
    burn: BigNumberish,
    call: BigNumberish,
    gov: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    daoRegistry(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    deployDAO(
      name_: string,
      symbol_: string,
      paused_: boolean,
      voters: string[],
      shares: BigNumberish[],
      votingPeriod_: BigNumberish,
      quorum_: BigNumberish,
      supermajority_: BigNumberish,
      mint: BigNumberish,
      burn: BigNumberish,
      call: BigNumberish,
      gov: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DAOdeployed(address)"(
      liteDAO?: string | null
    ): TypedEventFilter<[string], { liteDAO: string }>;

    DAOdeployed(
      liteDAO?: string | null
    ): TypedEventFilter<[string], { liteDAO: string }>;
  };

  estimateGas: {
    daoRegistry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployDAO(
      name_: string,
      symbol_: string,
      paused_: boolean,
      voters: string[],
      shares: BigNumberish[],
      votingPeriod_: BigNumberish,
      quorum_: BigNumberish,
      supermajority_: BigNumberish,
      mint: BigNumberish,
      burn: BigNumberish,
      call: BigNumberish,
      gov: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    daoRegistry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployDAO(
      name_: string,
      symbol_: string,
      paused_: boolean,
      voters: string[],
      shares: BigNumberish[],
      votingPeriod_: BigNumberish,
      quorum_: BigNumberish,
      supermajority_: BigNumberish,
      mint: BigNumberish,
      burn: BigNumberish,
      call: BigNumberish,
      gov: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
